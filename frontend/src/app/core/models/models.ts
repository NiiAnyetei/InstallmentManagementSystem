/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/bills/{billId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bill
         * @description Gets the bill
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    billId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the bill */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bills
         * @description Gets the bills
         */
        get: {
            parameters: {
                query?: {
                    customer?: string;
                    from?: string;
                    to?: string;
                    status?: components["schemas"]["BillStatus"];
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the bills */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillsDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get customers
         * @description Gets the customers
         */
        get: {
            parameters: {
                query?: {
                    firstName?: string;
                    lastName?: string;
                    fullName?: string;
                    phoneNumber?: string;
                    email?: string;
                    identificationNumber?: string;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the customers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CustomersDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * New customer
         * @description Create a new customer
         *
         *     Sample request:
         *
         *         POST api/customer
         *         {
         *             "firstName": "John",
         *             "lastName": "Doe",
         *             "phoneNumber": "+233200000000",
         *             "email": "johndoe@email.com",
         *             "identificationNumber": "GHA-0000000000-0"
         *         }
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["NewCustomerDto"];
                    "text/json": components["schemas"]["NewCustomerDto"];
                    "application/*+json": components["schemas"]["NewCustomerDto"];
                };
            };
            responses: {
                /** @description Returns the customer */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CustomerDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/customers/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get customer
         * @description Gets the customer
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    customerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the customer */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CustomerDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /**
         * Update a customer
         * @description Updates a customer
         *
         *     Sample request:
         *
         *         PUT api/customer/:customerId
         *         {
         *             "firstName": "Joe",
         *         }
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    customerId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdatedCustomerDto"];
                    "text/json": components["schemas"]["UpdatedCustomerDto"];
                    "application/*+json": components["schemas"]["UpdatedCustomerDto"];
                };
            };
            responses: {
                /** @description Returns a customer */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CustomerDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/installments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get installments
         * @description Gets the installments
         */
        get: {
            parameters: {
                query?: {
                    item?: string;
                    customer?: string;
                    from?: string;
                    to?: string;
                    status?: components["schemas"]["InstallmentStatus"];
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the installments */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InstallmentsDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * New installment
         * @description Create a new installment
         *
         *     Sample request:
         *
         *         POST api/installment
         *         {
         *                "customerId": "a6356aae-e248-42a0-87b3-f68a2a92e9be",
         *                "item": "iPhone X",
         *                "itemDetails": "64GB | XDFDFSS7",
         *                "amount": 1000,
         *                "initialDeposit": 0,
         *                "cyclePeriod": 1,
         *                "cycleNumber": 10,
         *                "paymentChannel": "mtn"
         *         }
         *
         *         "cyclePeriod": 1, //Daily = 1, Weekly = 7, Monthly = 30,
         *         "paymentChannel": "mtn" //"mtn" | "atl" | "vod"
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["NewInstallmentDto"];
                    "text/json": components["schemas"]["NewInstallmentDto"];
                    "application/*+json": components["schemas"]["NewInstallmentDto"];
                };
            };
            responses: {
                /** @description Returns the installment */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NewInstallmentDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/installments/{installmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get installment
         * @description Gets the installment
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    installmentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the installment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InstallmentDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /**
         * Update a installment
         * @description Updates a installment
         *
         *     Sample request:
         *
         *         PUT api/installment/:installmentId
         *         {
         *             "firstName": "Joe",
         *         }
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    installmentId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdatedInstallmentDto"];
                    "text/json": components["schemas"]["UpdatedInstallmentDto"];
                    "application/*+json": components["schemas"]["UpdatedInstallmentDto"];
                };
            };
            responses: {
                /** @description Returns a installment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InstallmentDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dashboard metrics
         * @description Gets the dashboard metrics
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the dashboard metrics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MetricDto"][];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{paymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payment
         * @description Gets the payment
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    paymentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the payment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payments
         * @description Gets the payments
         */
        get: {
            parameters: {
                query?: {
                    customer?: string;
                    from?: string;
                    to?: string;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the payments */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentsDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Existing user login
         * @description Login for existing user
         *
         *     Sample request:
         *
         *         POST api/user/login
         *         {
         *             "email": "jake@jake.jake",
         *             "password": "jakejake"
         *         }
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LoginUserDto"];
                    "text/json": components["schemas"]["LoginUserDto"];
                    "application/*+json": components["schemas"]["LoginUserDto"];
                };
            };
            responses: {
                /** @description Returns tokens */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginUserResponseDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update current user
         * @description Updates details of the currently logged-in user
         *
         *     Sample request:
         *
         *         PUT api/user
         *         {
         *             "email": "jake@jake.jake",
         *             "bio": "I like to skateboard",
         *             "image": "https://i.stack.imgur.com/xHWG8.jpg"
         *         }
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdatedUserDto"];
                    "text/json": components["schemas"]["UpdatedUserDto"];
                    "application/*+json": components["schemas"]["UpdatedUserDto"];
                };
            };
            responses: {
                /** @description Returns the user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /**
         * New user signup
         * @description Register a new user
         *
         *     Sample request:
         *
         *         POST api/user
         *         {
         *             "username": "Jacob",
         *             "email": "jake@jake.jake",
         *             "password": "jakejake"
         *         }
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["NewUserDto"];
                    "text/json": components["schemas"]["NewUserDto"];
                    "application/*+json": components["schemas"]["NewUserDto"];
                };
            };
            responses: {
                /** @description Returns the user */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Token
         * @description Refresh token for logged in user
         *
         *     Sample request:
         *
         *         POST api/user/refresh
         *         {
         *             "accessToken": "string",
         *             "refreshToken": "string"
         *         }
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["NewRefreshTokenDto"];
                    "text/json": components["schemas"]["NewRefreshTokenDto"];
                    "application/*+json": components["schemas"]["NewRefreshTokenDto"];
                };
            };
            responses: {
                /** @description Returns the Refresh Token */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user
         * @description Gets the currently logged-in user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns the user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDto"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/webhooks/paystack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["PaystackWebhookDto"];
                    "text/json": components["schemas"]["PaystackWebhookDto"];
                    "application/*+json": components["schemas"]["PaystackWebhookDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BillDto: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            dueDate: string;
            paymentChannel: string;
            /** Format: double */
            amount: number;
            cyclePeriod: components["schemas"]["CyclePeriod"];
            status: components["schemas"]["BillStatus"];
            isProcessed: boolean;
            installment: components["schemas"]["InstallmentDto"];
        };
        /** @enum {string} */
        BillStatus: "Pending" | "Paid" | "Overdue" | "Due";
        BillsDto: {
            items: components["schemas"]["BillDto"][];
            /** Format: int32 */
            count: number;
        };
        CustomerDto: {
            /** Format: uuid */
            id: string;
            firstName: string;
            lastName: string;
            fullName: string;
            phoneNumber: string;
            email: string;
            identificationNumber: string;
        };
        CustomersDto: {
            items: components["schemas"]["CustomerDto"][];
            /** Format: int32 */
            count: number;
        };
        /** @enum {string} */
        CyclePeriod: "Daily" | "Weekly" | "Monthly";
        Error: {
            detail: string;
            /** Format: date-time */
            timestamp: string;
        };
        InstallmentDto: {
            /** Format: uuid */
            id: string;
            customer: components["schemas"]["CustomerDto"];
            item: string;
            itemDetails: string;
            /** Format: double */
            amount: number;
            /** Format: double */
            initialDeposit: number;
            /** Format: double */
            totalAmountDue: number;
            cyclePeriod: components["schemas"]["CyclePeriod"];
            /** Format: int32 */
            cycleNumber: number;
            paymentChannel: string;
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            createdBy: string;
            status: components["schemas"]["InstallmentStatus"];
        };
        /** @enum {string} */
        InstallmentStatus: "Inactive" | "Active" | "Paid";
        InstallmentsDto: {
            items: components["schemas"]["InstallmentDto"][];
            /** Format: int32 */
            count: number;
        };
        LoginUserDto: {
            email: string;
            password: string;
        };
        LoginUserResponseDto: {
            accessToken: string;
            refreshToken: string;
            /** Format: date-time */
            expiresAt: string;
            username: string;
        };
        MetricDto: {
            name: string;
            value: string;
        };
        NewCustomerDto: {
            firstName: string;
            lastName: string;
            phoneNumber: string;
            email: string;
            identificationNumber: string;
        };
        NewInstallmentDto: {
            customerId: string;
            item: string;
            itemDetails: string;
            /** Format: double */
            amount: number;
            /** Format: double */
            initialDeposit: number;
            cyclePeriod: components["schemas"]["CyclePeriod"];
            /** Format: int32 */
            cycleNumber: number;
            paymentChannel: string;
            processInitialDeposit: boolean;
        };
        NewRefreshTokenDto: {
            accessToken: string;
            refreshToken: string;
        };
        NewUserDto: {
            username: string;
            email: string;
            password: string;
        };
        PaymentDto: {
            /** Format: uuid */
            id: string;
            paymentMode: components["schemas"]["PaymentMode"];
            /** Format: date-time */
            paymentDate: string;
            /** Format: double */
            amount: number;
            installment: components["schemas"]["InstallmentDto"];
        };
        /** @enum {string} */
        PaymentMode: "Momo" | "Cash" | "Bank";
        PaymentsDto: {
            items: components["schemas"]["PaymentDto"][];
            /** Format: int32 */
            count: number;
        };
        PaystackWebhookDto: {
            event: string;
            data: unknown;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        UpdatedCustomerDto: {
            firstName?: string | null;
            lastName?: string | null;
            phoneNumber?: string | null;
            email?: string | null;
            identificationNumber?: string | null;
        };
        UpdatedInstallmentDto: {
            item?: string | null;
            itemDetails?: string | null;
            /** Format: double */
            amount?: number | null;
        };
        UpdatedUserDto: {
            username?: string | null;
            email?: string | null;
            bio?: string | null;
            image?: string | null;
            password?: string | null;
        };
        UserDto: {
            username: string;
            email: string;
            bio: string;
            image: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
